{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50],"program":"/Users/kafuhamada/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","copyless","/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=2f9c70a87fedd46a","-C","extra-filename=-2f9c70a87fedd46a","--out-dir","/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps","-L","dependency=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kafuhamada/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,68,111,99,117,109,101,110,116,115,47,83,116,117,100,121,47,80,121,116,104,111,110,47,70,108,97,115,107,47,105,112,117,47,112,108,117,103,105,110,95,109,97,114,107,101,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,99,111,112,121,108,101,115,115,45,50,102,57,99,55,48,97,56,55,102,101,100,100,52,54,97,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"copyless","disambiguator":[13361345118200957894,2750366854313448058]},"crate_root":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src","external_crates":[{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10276720879801066790,7270037695145965846]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10081619512596250754,7636038010184307036]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[530680240650180892,17676251987033652714]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11705792804325932575,5133282415091935280]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17612447423192331107,152287996219017673]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4726535560424510965,12625991608955964180]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[2075391902352510242,6907956565514940343]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1151212087006369140,11441208638619140056]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[8447635395464762154,8931705543987386293]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[8817718997728662164,16991859756432700022]}}],"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":219,"line_start":1,"line_end":9,"column_start":1,"column_end":51}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142,"byte_end":155,"line_start":8,"line_end":8,"column_start":17,"column_end":30},"alias_span":null,"name":"BoxAllocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":157,"byte_end":166,"line_start":8,"line_end":8,"column_start":32,"column_end":41},"alias_span":null,"name":"BoxHelper","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":183,"byte_end":196,"line_start":9,"line_end":9,"column_start":15,"column_end":28},"alias_span":null,"name":"VecAllocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":198,"byte_end":206,"line_start":9,"line_end":9,"column_start":30,"column_end":38},"alias_span":null,"name":"VecEntry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":208,"byte_end":217,"line_start":9,"line_end":9,"column_start":40,"column_end":49},"alias_span":null,"name":"VecHelper","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":219,"line_start":1,"line_end":9,"column_start":1,"column_end":51},"name":"","qualname":"::","value":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/copyless-0.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":34},{"krate":0,"index":62},{"krate":0,"index":68}],"decl_id":null,"docs":" Helper extensions of standard containers that allow memcopy-less operation.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":348,"byte_end":361,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"BoxAllocation","qualname":"::boxed::BoxAllocation","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typesafe helper that stores the allocated pointer without the data initialized.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":483,"byte_end":487,"line_start":9,"line_end":9,"column_start":12,"column_end":16},"name":"init","qualname":"<BoxAllocation<T>>::init","value":"fn (mut self, value: T) -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and writes the given value into the allocation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":1012,"byte_end":1021,"line_start":31,"line_end":31,"column_start":11,"column_end":20},"name":"BoxHelper","qualname":"::boxed::BoxHelper","value":"BoxHelper<T>","parent":null,"children":[{"krate":0,"index":28}],"decl_id":null,"docs":" Helper trait for a `Box` type that allocates up-front.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":1092,"byte_end":1097,"line_start":33,"line_end":33,"column_start":8,"column_end":13},"name":"alloc","qualname":"::boxed::BoxHelper::alloc","value":"fn () -> BoxAllocation<T>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Allocates the storage without providing any data.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":1505,"byte_end":1518,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"VecAllocation","qualname":"::vec::VecAllocation","value":"VecAllocation {  }","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":39}],"decl_id":null,"docs":" A typesafe helper that separates new value construction from\n vector growing, allowing LLVM to ideally construct the element in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":1886,"byte_end":1890,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"init","qualname":"<VecAllocation>::init","value":"fn (self, value: T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and writes the given value into the allocation.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":1857,"byte_end":1874,"line_start":15,"line_end":15,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":49},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2247,"byte_end":2253,"line_start":28,"line_end":28,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::vec::VecEntry::Vacant","value":"VecEntry::Vacant(VecAllocation<'a, T>)","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Entry has just been freshly allocated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":53},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2305,"byte_end":2313,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::vec::VecEntry::Occupied","value":"VecEntry::Occupied(&'a mut T)","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Existing entry.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2174,"byte_end":2182,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"VecEntry","qualname":"::vec::VecEntry","value":"VecEntry::{Vacant, Occupied}","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":53}],"decl_id":null,"docs":" An entry into a vector, similar to `std::collections::hash_map::Entry`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2431,"byte_end":2434,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"set","qualname":"<VecEntry>::set","value":"fn (self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for this entry.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2402,"byte_end":2419,"line_start":35,"line_end":35,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2683,"byte_end":2692,"line_start":45,"line_end":45,"column_start":11,"column_end":20},"name":"VecHelper","qualname":"::vec::VecHelper","value":"VecHelper<T>","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54}],"decl_id":null,"docs":" Helper trait for a `Vec` type that allocates up-front.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2776,"byte_end":2781,"line_start":47,"line_end":47,"column_start":8,"column_end":13},"name":"alloc","qualname":"::vec::VecHelper::alloc","value":"fn (&mut self) -> VecAllocation<T>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Growns the vector by a single entry, returning the allocation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2963,"byte_end":2968,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"entry","qualname":"::vec::VecHelper::entry","value":"fn (&mut self, index: usize) -> VecEntry<T>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Either returns an existing elemenet, or grows the vector by one.\n Doesn't expect indices to be higher than the current length.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":383,"byte_end":396,"line_start":7,"line_end":7,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":702,"byte_end":715,"line_start":18,"line_end":18,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":1149,"byte_end":1152,"line_start":36,"line_end":36,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":1590,"byte_end":1603,"line_start":10,"line_end":10,"column_start":13,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2341,"byte_end":2349,"line_start":33,"line_end":33,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":3038,"byte_end":3041,"line_start":53,"line_end":53,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":383,"byte_end":396,"line_start":7,"line_end":7,"column_start":9,"column_end":22},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":16},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":702,"byte_end":715,"line_start":18,"line_end":18,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":16},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,98,111,120,101,100,46,114,115],"byte_start":1149,"byte_end":1152,"line_start":36,"line_end":36,"column_start":26,"column_end":29},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":5,"index":130},"to":{"krate":0,"index":26}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":1590,"byte_end":1603,"line_start":10,"line_end":10,"column_start":13,"column_end":26},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":38},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":2341,"byte_end":2349,"line_start":33,"line_end":33,"column_start":13,"column_end":21},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,111,112,121,108,101,115,115,45,48,46,49,46,50,47,115,114,99,47,118,101,99,46,114,115],"byte_start":3038,"byte_end":3041,"line_start":53,"line_end":53,"column_start":26,"column_end":29},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":5,"index":4498},"to":{"krate":0,"index":50}}]}