{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51],"program":"/Users/kafuhamada/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","tokio_udp","/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=8f7d5aa60834466c","-C","extra-filename=-8f7d5aa60834466c","--out-dir","/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps","-L","dependency=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps","--extern","bytes=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libbytes-f489fa4f0d2cd306.rmeta","--extern","futures=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libfutures-36fc9c5f0b1dcdad.rmeta","--extern","log=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/liblog-7dbec1238f877c95.rmeta","--extern","mio=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libmio-a389a7562df294cd.rmeta","--extern","tokio_codec=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libtokio_codec-b743bda91495af3f.rmeta","--extern","tokio_io=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libtokio_io-353ddf2b90cf4168.rmeta","--extern","tokio_reactor=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libtokio_reactor-58eeb5734848ba47.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/kafuhamada/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,68,111,99,117,109,101,110,116,115,47,83,116,117,100,121,47,80,121,116,104,111,110,47,70,108,97,115,107,47,105,112,117,47,112,108,117,103,105,110,95,109,97,114,107,101,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,116,111,107,105,111,95,117,100,112,45,56,102,55,100,53,97,97,54,48,56,51,52,52,54,54,99,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"tokio_udp","disambiguator":[10273250301254217903,11957820903589479053]},"crate_root":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src","external_crates":[{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10276720879801066790,7270037695145965846]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10081619512596250754,7636038010184307036]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[530680240650180892,17676251987033652714]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11705792804325932575,5133282415091935280]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17612447423192331107,152287996219017673]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4726535560424510965,12625991608955964180]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[2075391902352510242,6907956565514940343]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1151212087006369140,11441208638619140056]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[8447635395464762154,8931705543987386293]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[8817718997728662164,16991859756432700022]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":11,"id":{"name":"bytes","disambiguator":[6628222331448514398,10266417969816130403]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":12,"id":{"name":"byteorder","disambiguator":[6601194364471206112,11011716180478676980]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":13,"id":{"name":"iovec","disambiguator":[11705498569841055178,9590894888181962113]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":14,"id":{"name":"libc","disambiguator":[12754417319316353838,2533270702905957675]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":15,"id":{"name":"futures","disambiguator":[13322985677926944286,8928495775863951525]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":16,"id":{"name":"mio","disambiguator":[7580121570248855398,13189309331091221894]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":17,"id":{"name":"net2","disambiguator":[9865959648958299165,16428114977964153938]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":18,"id":{"name":"cfg_if","disambiguator":[15091429926129166764,11089803005832277337]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":19,"id":{"name":"slab","disambiguator":[5721178310442201014,4209991805855531206]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":20,"id":{"name":"log","disambiguator":[18305681335391193276,14168357186589133368]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":21,"id":{"name":"tokio_codec","disambiguator":[3783460264826903630,3682337434635132802]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":22,"id":{"name":"tokio_io","disambiguator":[16190350714674022115,4216525605291402135]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":23,"id":{"name":"tokio_reactor","disambiguator":[13947921176600899379,18078716839133443343]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":24,"id":{"name":"crossbeam_utils","disambiguator":[15748304330052537730,18224790611224242713]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":25,"id":{"name":"lazy_static","disambiguator":[5505499625520047427,11820619831539565713]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":26,"id":{"name":"num_cpus","disambiguator":[10147975330912585048,8251795159459048605]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":27,"id":{"name":"parking_lot","disambiguator":[17310900811647634229,7651920061612729857]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":28,"id":{"name":"lock_api","disambiguator":[3296784652292807389,8073817970701215318]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":29,"id":{"name":"scopeguard","disambiguator":[17053375009949538071,12550202249022676517]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":30,"id":{"name":"owning_ref","disambiguator":[11954348810979470642,15235087250656581104]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":31,"id":{"name":"stable_deref_trait","disambiguator":[17211370046318838544,1717915163905743563]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":32,"id":{"name":"parking_lot_core","disambiguator":[5654396422822933783,13094911405700975116]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":33,"id":{"name":"rand","disambiguator":[1434740282115904704,2508775071030240666]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":34,"id":{"name":"rand_jitter","disambiguator":[9860612140584831388,13119064577302067717]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":35,"id":{"name":"rand_core","disambiguator":[15626934703570268357,14241757386494578888]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":36,"id":{"name":"rand_os","disambiguator":[10913673727785453687,10090549521103763213]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":37,"id":{"name":"rand_isaac","disambiguator":[18048955687387928730,13012747799088707141]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":38,"id":{"name":"rand_core","disambiguator":[17257018165449867085,12270982780340280045]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":39,"id":{"name":"rand_chacha","disambiguator":[15709293451861226336,2135492918709176966]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":40,"id":{"name":"rand_hc","disambiguator":[4590232432165700695,11003766660164033261]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":41,"id":{"name":"rand_pcg","disambiguator":[4972483740743828883,14211286883336701826]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":42,"id":{"name":"rand_xorshift","disambiguator":[7640422103726982096,5382879627999367513]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":43,"id":{"name":"smallvec","disambiguator":[6400286196498626601,2490639602576790802]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":44,"id":{"name":"tokio_executor","disambiguator":[18254042591230911032,6040712086202627518]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":45,"id":{"name":"tokio_sync","disambiguator":[9707031294480844263,11425782588297757488]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","num":46,"id":{"name":"fnv","disambiguator":[18193406559090740127,15438009076609318869]}}],"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":1211,"line_start":1,"line_end":40,"column_start":1,"column_end":37}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1094,"byte_end":1103,"line_start":37,"line_end":37,"column_start":22,"column_end":31},"alias_span":null,"name":"UdpFramed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1127,"byte_end":1136,"line_start":38,"line_end":38,"column_start":23,"column_end":32},"alias_span":null,"name":"UdpSocket","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1164,"byte_end":1173,"line_start":39,"line_end":39,"column_start":27,"column_end":36},"alias_span":null,"name":"SendDgram","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1201,"byte_end":1210,"line_start":40,"line_end":40,"column_start":27,"column_end":36},"alias_span":null,"name":"RecvDgram","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":1211,"line_start":1,"line_end":40,"column_start":1,"column_end":37},"name":"","qualname":"::","value":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":94},{"krate":0,"index":210},{"krate":0,"index":240},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276}],"decl_id":null,"docs":" UDP bindings for `tokio`.","sig":null,"attributes":[{"value":"deny(missing_docs, warnings, missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59,"byte_end":122,"line_start":2,"line_end":2,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":278},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":2480,"byte_end":2489,"line_start":29,"line_end":29,"column_start":12,"column_end":21},"name":"UdpFramed","qualname":"::frame::UdpFramed","value":"UdpFramed {  }","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using\n the `Encoder` and `Decoder` traits to encode and decode frames.","sig":null,"attributes":[{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":2405,"byte_end":2451,"line_start":27,"line_end":27,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":5165,"byte_end":5168,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<UdpFramed<C>>::new","value":"fn (socket: UdpSocket, codec: C) -> UdpFramed<C>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UdpFramed` backed by the given socket and codec.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":5837,"byte_end":5844,"line_start":136,"line_end":136,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<UdpFramed<C>>::get_ref","value":"fn (&self) -> &UdpSocket","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by `Framed`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":6204,"byte_end":6211,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<UdpFramed<C>>::get_mut","value":"fn (&mut self) -> &mut UdpSocket","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `Framed`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":6354,"byte_end":6364,"line_start":153,"line_end":153,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<UdpFramed<C>>::into_inner","value":"fn (self) -> UdpSocket","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Framed`, returning its underlying I/O stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":6670,"byte_end":6679,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"UdpSocket","qualname":"::socket::UdpSocket","value":"UdpSocket {  }","parent":null,"children":[{"krate":0,"index":27}],"decl_id":null,"docs":" An I/O object representing a UDP socket.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":6861,"byte_end":6865,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"bind","qualname":"<UdpSocket>::bind","value":"fn (addr: &SocketAddr) -> io::Result<UdpSocket>","parent":null,"children":[],"decl_id":null,"docs":" This function will create a new UDP socket and attempt to bind it to\n the `addr` provided.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":7752,"byte_end":7760,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"from_std","qualname":"<UdpSocket>::from_std","value":"fn (socket: net::UdpSocket, handle: &Handle) -> io::Result<UdpSocket>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `UdpSocket` from the previously bound socket provided.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":8080,"byte_end":8090,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<UdpSocket>::local_addr","value":"fn (&self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this socket is bound to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":8356,"byte_end":8363,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"connect","qualname":"<UdpSocket>::connect","value":"fn (&self, addr: &SocketAddr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Connects the UDP socket setting the default destination for send() and\n limiting packets that are read via recv from the address specified in\n `addr`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":8555,"byte_end":8559,"line_start":62,"line_end":62,"column_start":12,"column_end":16},"name":"send","qualname":"<UdpSocket>::send","value":"fn (&mut self, buf: &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.2\", note = \"use poll_send instead\")","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":8462,"byte_end":8524,"line_start":60,"line_end":60,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":9467,"byte_end":9476,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"poll_send","qualname":"<UdpSocket>::poll_send","value":"fn (&mut self, buf: &[u8]) -> Poll<usize, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the remote address to which it is connected.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":9965,"byte_end":9969,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"recv","qualname":"<UdpSocket>::recv","value":"fn (&mut self, buf: &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.2\", note = \"use poll_recv instead\")","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":9872,"byte_end":9934,"line_start":100,"line_end":100,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":11191,"byte_end":11200,"line_start":132,"line_end":132,"column_start":12,"column_end":21},"name":"poll_recv","qualname":"<UdpSocket>::poll_recv","value":"fn (&mut self, buf: &mut [u8]) -> Poll<usize, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Receives a single datagram message on the socket from the remote address to\n which it is connected. On success, returns the number of bytes read.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":11738,"byte_end":11745,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"send_to","qualname":"<UdpSocket>::send_to","value":"fn (&mut self, buf: &[u8], target: &SocketAddr) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.2\", note = \"use poll_send_to instead\")","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":11642,"byte_end":11707,"line_start":145,"line_end":145,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":12647,"byte_end":12659,"line_start":171,"line_end":171,"column_start":12,"column_end":24},"name":"poll_send_to","qualname":"<UdpSocket>::poll_send_to","value":"fn (&mut self, buf: &[u8], target: &SocketAddr) -> Poll<usize, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the given address. On success, returns the\n number of bytes written.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":13844,"byte_end":13854,"line_start":198,"line_end":198,"column_start":12,"column_end":22},"name":"send_dgram","qualname":"<UdpSocket>::send_dgram","value":"fn <T> (self, buf: T, addr: &SocketAddr) -> SendDgram<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that will write the entire contents of the buffer\n `buf` provided as a datagram to this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14093,"byte_end":14102,"line_start":206,"line_end":206,"column_start":12,"column_end":21},"name":"recv_from","qualname":"<UdpSocket>::recv_from","value":"fn (&mut self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.2\", note = \"use poll_recv_from instead\")","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":13995,"byte_end":14062,"line_start":204,"line_end":204,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14608,"byte_end":14622,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"poll_recv_from","qualname":"<UdpSocket>::poll_recv_from","value":"fn (&mut self, buf: &mut [u8]) -> Poll<(usize, SocketAddr), io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket. On success, returns the number of bytes\n read and the address from whence the data came.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":15703,"byte_end":15713,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"recv_dgram","qualname":"<UdpSocket>::recv_dgram","value":"fn <T> (self, buf: T) -> RecvDgram<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that receive a datagram to be written to the buffer\n provided.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":16508,"byte_end":16523,"line_start":270,"line_end":270,"column_start":12,"column_end":27},"name":"poll_read_ready","qualname":"<UdpSocket>::poll_read_ready","value":"fn (&self, mask: mio::Ready) -> Poll<mio::Ready, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Check the UDP socket's read readiness state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":17079,"byte_end":17095,"line_start":285,"line_end":285,"column_start":12,"column_end":28},"name":"poll_write_ready","qualname":"<UdpSocket>::poll_write_ready","value":"fn (&self) -> Poll<mio::Ready, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Check the UDP socket's write readiness state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":17394,"byte_end":17403,"line_start":294,"line_end":294,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<UdpSocket>::broadcast","value":"fn (&self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":17659,"byte_end":17672,"line_start":302,"line_end":302,"column_start":12,"column_end":25},"name":"set_broadcast","qualname":"<UdpSocket>::set_broadcast","value":"fn (&self, on: bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":18006,"byte_end":18023,"line_start":311,"line_end":311,"column_start":12,"column_end":29},"name":"multicast_loop_v4","qualname":"<UdpSocket>::multicast_loop_v4","value":"fn (&self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":18363,"byte_end":18384,"line_start":322,"line_end":322,"column_start":12,"column_end":33},"name":"set_multicast_loop_v4","qualname":"<UdpSocket>::set_multicast_loop_v4","value":"fn (&self, on: bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":18722,"byte_end":18738,"line_start":331,"line_end":331,"column_start":12,"column_end":28},"name":"multicast_ttl_v4","qualname":"<UdpSocket>::multicast_ttl_v4","value":"fn (&self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":19217,"byte_end":19237,"line_start":344,"line_end":344,"column_start":12,"column_end":32},"name":"set_multicast_ttl_v4","qualname":"<UdpSocket>::set_multicast_ttl_v4","value":"fn (&self, ttl: u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":19581,"byte_end":19598,"line_start":353,"line_end":353,"column_start":12,"column_end":29},"name":"multicast_loop_v6","qualname":"<UdpSocket>::multicast_loop_v6","value":"fn (&self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":19942,"byte_end":19963,"line_start":364,"line_end":364,"column_start":12,"column_end":33},"name":"set_multicast_loop_v6","qualname":"<UdpSocket>::set_multicast_loop_v6","value":"fn (&self, on: bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":20252,"byte_end":20255,"line_start":373,"line_end":373,"column_start":12,"column_end":15},"name":"ttl","qualname":"<UdpSocket>::ttl","value":"fn (&self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":20512,"byte_end":20519,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"set_ttl","qualname":"<UdpSocket>::set_ttl","value":"fn (&self, ttl: u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":21037,"byte_end":21054,"line_start":392,"line_end":392,"column_start":12,"column_end":29},"name":"join_multicast_v4","qualname":"<UdpSocket>::join_multicast_v4","value":"fn (&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_ADD_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":21577,"byte_end":21594,"line_start":403,"line_end":403,"column_start":12,"column_end":29},"name":"join_multicast_v6","qualname":"<UdpSocket>::join_multicast_v6","value":"fn (&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":22014,"byte_end":22032,"line_start":414,"line_end":414,"column_start":12,"column_end":30},"name":"leave_multicast_v4","qualname":"<UdpSocket>::leave_multicast_v4","value":"fn (&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_DROP_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":22463,"byte_end":22481,"line_start":425,"line_end":425,"column_start":12,"column_end":30},"name":"leave_multicast_v6","qualname":"<UdpSocket>::leave_multicast_v6","value":"fn (&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,101,110,100,95,100,103,114,97,109,46,114,115],"byte_start":23717,"byte_end":23726,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"SendDgram","qualname":"::send_dgram::SendDgram","value":"SendDgram {  }","parent":null,"children":[{"krate":0,"index":59}],"decl_id":null,"docs":" A future used to write the entire contents of some data to a UDP socket.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,101,110,100,95,100,103,114,97,109,46,114,115],"byte_start":23640,"byte_end":23688,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":296},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":25486,"byte_end":25495,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"RecvDgram","qualname":"::recv_dgram::RecvDgram","value":"RecvDgram {  }","parent":null,"children":[{"krate":0,"index":75}],"decl_id":null,"docs":" A future used to receive a datagram from a UDP socket.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":25409,"byte_end":25457,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":25893,"byte_end":25898,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Parts","qualname":"::recv_dgram::Parts","value":"Parts { socket, buffer }","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" Components of a `RecvDgram` future, returned from `into_parts`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":89},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":25931,"byte_end":25937,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"name":"socket","qualname":"::recv_dgram::Parts::socket","value":"socket::UdpSocket","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The socket\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":91},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":25977,"byte_end":25983,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"name":"buffer","qualname":"::recv_dgram::Parts::buffer","value":"T","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":27010,"byte_end":27020,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<RecvDgram<T>>::into_parts","value":"fn (mut self) -> Parts<T>","parent":null,"children":[],"decl_id":null,"docs":" Consume the `RecvDgram`, returning the socket and buffer.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":2644,"byte_end":2653,"line_start":38,"line_end":38,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":3467,"byte_end":3476,"line_start":61,"line_end":61,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":5003,"byte_end":5012,"line_start":114,"line_end":114,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":6732,"byte_end":6741,"line_start":17,"line_end":17,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":22703,"byte_end":22712,"line_start":432,"line_end":432,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":22927,"byte_end":22936,"line_start":443,"line_end":443,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,101,110,100,95,100,103,114,97,109,46,114,115],"byte_start":24070,"byte_end":24079,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,101,110,100,95,100,103,114,97,109,46,114,115],"byte_start":24475,"byte_end":24484,"line_start":41,"line_end":41,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":26014,"byte_end":26023,"line_start":38,"line_end":38,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":27300,"byte_end":27309,"line_start":84,"line_end":84,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":2644,"byte_end":2653,"line_start":38,"line_end":38,"column_start":29,"column_end":38},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":278},"to":{"krate":15,"index":2046}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":3467,"byte_end":3476,"line_start":61,"line_end":61,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":278},"to":{"krate":15,"index":2524}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":5003,"byte_end":5012,"line_start":114,"line_end":114,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":6732,"byte_end":6741,"line_start":17,"line_end":17,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":22703,"byte_end":22712,"line_start":432,"line_end":432,"column_start":21,"column_end":30},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":130},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":22927,"byte_end":22936,"line_start":443,"line_end":443,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":130},"to":{"krate":1,"index":11960}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,101,110,100,95,100,103,114,97,109,46,114,115],"byte_start":24070,"byte_end":24079,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,115,101,110,100,95,100,103,114,97,109,46,114,115],"byte_start":24475,"byte_end":24484,"line_start":41,"line_end":41,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":284},"to":{"krate":15,"index":668}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":26014,"byte_end":26023,"line_start":38,"line_end":38,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,111,107,105,111,45,117,100,112,45,48,46,49,46,51,47,115,114,99,47,114,101,99,118,95,100,103,114,97,109,46,114,115],"byte_start":27300,"byte_end":27309,"line_start":84,"line_end":84,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":296},"to":{"krate":15,"index":668}}]}