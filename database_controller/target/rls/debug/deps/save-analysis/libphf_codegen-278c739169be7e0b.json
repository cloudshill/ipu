{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52],"program":"/Users/kafuhamada/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","phf_codegen","/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","-C","metadata=278c739169be7e0b","-C","extra-filename=-278c739169be7e0b","--out-dir","/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps","-L","dependency=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps","--extern","phf_generator=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libphf_generator-17c3d10a01383979.rlib","--extern","phf_shared=/Users/kafuhamada/Documents/Study/Python/Flask/ipu/plugin_market/target/rls/debug/deps/libphf_shared-cf5bdf4899e8d0c2.rlib","--cap-lints","allow","--error-format=json","--sysroot","/Users/kafuhamada/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,68,111,99,117,109,101,110,116,115,47,83,116,117,100,121,47,80,121,116,104,111,110,47,70,108,97,115,107,47,105,112,117,47,112,108,117,103,105,110,95,109,97,114,107,101,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,112,104,102,95,99,111,100,101,103,101,110,45,50,55,56,99,55,51,57,49,54,57,98,101,55,101,48,98,46,114,108,105,98]},"prelude":{"crate_id":{"name":"phf_codegen","disambiguator":[2681274133370095875,9133516816943778595]},"crate_root":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src","external_crates":[{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10276720879801066790,7270037695145965846]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10081619512596250754,7636038010184307036]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[530680240650180892,17676251987033652714]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11705792804325932575,5133282415091935280]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17612447423192331107,152287996219017673]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4726535560424510965,12625991608955964180]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[2075391902352510242,6907956565514940343]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1151212087006369140,11441208638619140056]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[8447635395464762154,8931705543987386293]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[8817718997728662164,16991859756432700022]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":11,"id":{"name":"phf_shared","disambiguator":[8960577108435133863,12671020677243555018]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":12,"id":{"name":"siphasher","disambiguator":[772413717642247765,14202597184294143713]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":13,"id":{"name":"unicase","disambiguator":[11108445936183147235,15436862061443915960]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":14,"id":{"name":"phf_generator","disambiguator":[1716225967023993436,16030475375193997184]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":15,"id":{"name":"rand","disambiguator":[11416444370229981615,9624249827823429093]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":16,"id":{"name":"rand_jitter","disambiguator":[13924122822826980580,16134678946499390148]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":17,"id":{"name":"rand_core","disambiguator":[1426646842087541530,16702598989768063603]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":18,"id":{"name":"libc","disambiguator":[7633191688805124902,67085504854668438]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":19,"id":{"name":"rand_os","disambiguator":[910957186885079027,12942968178199593589]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":20,"id":{"name":"rand_isaac","disambiguator":[13713374655662304938,16656027322433553149]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":21,"id":{"name":"rand_core","disambiguator":[15476815172544977755,6859457131736900688]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":22,"id":{"name":"rand_chacha","disambiguator":[8370136689848907447,17954751770100735782]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":23,"id":{"name":"rand_hc","disambiguator":[8166504801800143798,15554995038037032506]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":24,"id":{"name":"rand_pcg","disambiguator":[1238785452721743358,12210646429992575310]}},{"file_name":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","num":25,"id":{"name":"rand_xorshift","disambiguator":[10521646890996236888,6682027782806862785]}}],"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9120,"line_start":1,"line_end":341,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9120,"line_start":1,"line_end":341,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kafuhamada/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.24/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":60},{"krate":0,"index":62}],"decl_id":null,"docs":" A set of builders to generate Rust source for PHF data structures at\n compile time.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2345,"byte_end":2348,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" A builder for the `phf::Map` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2516,"byte_end":2519,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<K>>::new","value":"fn () -> Map<K>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `phf::Map` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3243,"byte_end":3251,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<Map<K>>::phf_path","value":"fn (&mut self, path: &str) -> &mut Map<K>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3485,"byte_end":3490,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"entry","qualname":"<Map<K>>::entry","value":"fn (&mut self, key: K, value: &str) -> &mut Map<K>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3805,"byte_end":3810,"line_start":140,"line_end":140,"column_start":12,"column_end":17},"name":"build","qualname":"<Map<K>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::Map`, outputting Rust source to the provided writer.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4855,"byte_end":4858,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"Set","qualname":"::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":33}],"decl_id":null,"docs":" A builder for the `phf::Set` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4985,"byte_end":4988,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"name":"new","qualname":"<Set<T>>::new","value":"fn () -> Set<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `phf::Set` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5140,"byte_end":5148,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<Set<T>>::phf_path","value":"fn (&mut self, path: &str) -> &mut Set<T>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5291,"byte_end":5296,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"entry","qualname":"<Set<T>>::entry","value":"fn (&mut self, entry: T) -> &mut Set<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5567,"byte_end":5572,"line_start":210,"line_end":210,"column_start":12,"column_end":17},"name":"build","qualname":"<Set<T>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::Set`, outputting Rust source to the provided writer.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5805,"byte_end":5815,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"OrderedMap","qualname":"::OrderedMap","value":"OrderedMap {  }","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45}],"decl_id":null,"docs":" A builder for the `phf::OrderedMap` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6000,"byte_end":6003,"line_start":226,"line_end":226,"column_start":12,"column_end":15},"name":"new","qualname":"<OrderedMap<K>>::new","value":"fn () -> OrderedMap<K>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a enw `phf::OrderedMap` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6235,"byte_end":6243,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<OrderedMap<K>>::phf_path","value":"fn (&mut self, path: &str) -> &mut OrderedMap<K>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6484,"byte_end":6489,"line_start":243,"line_end":243,"column_start":12,"column_end":17},"name":"entry","qualname":"<OrderedMap<K>>::entry","value":"fn (&mut self, key: K, value: &str) -> &mut OrderedMap<K>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6826,"byte_end":6831,"line_start":255,"line_end":255,"column_start":12,"column_end":17},"name":"build","qualname":"<OrderedMap<K>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::OrderedMap`, outputting Rust source to the provided\n writer.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8144,"byte_end":8154,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"OrderedSet","qualname":"::OrderedSet","value":"OrderedSet {  }","parent":null,"children":[{"krate":0,"index":53}],"decl_id":null,"docs":" A builder for the `phf::OrderedSet` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8302,"byte_end":8305,"line_start":312,"line_end":312,"column_start":12,"column_end":15},"name":"new","qualname":"<OrderedSet<T>>::new","value":"fn () -> OrderedSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `phf::OrderedSet` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8478,"byte_end":8486,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<OrderedSet<T>>::phf_path","value":"fn (&mut self, path: &str) -> &mut OrderedSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8636,"byte_end":8641,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"entry","qualname":"<OrderedSet<T>>::entry","value":"fn (&mut self, entry: T) -> &mut OrderedSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8934,"byte_end":8939,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"build","qualname":"<OrderedSet<T>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::OrderedSet`, outputting Rust source to the provided\n writer.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2454,"byte_end":2457,"line_start":99,"line_end":99,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4920,"byte_end":4923,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5921,"byte_end":5931,"line_start":224,"line_end":224,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8223,"byte_end":8233,"line_start":310,"line_end":310,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2454,"byte_end":2457,"line_start":99,"line_end":99,"column_start":37,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4920,"byte_end":4923,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5921,"byte_end":5931,"line_start":224,"line_end":224,"column_start":37,"column_end":47},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,107,97,102,117,104,97,109,97,100,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8223,"byte_end":8233,"line_start":310,"line_end":310,"column_start":37,"column_end":47},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":60},"to":{"krate":4294967295,"index":4294967295}}]}